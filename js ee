(function ($, CUI) {
    var GROUP = "rte-color-picker",
        COLOR_PICKER_FEATURE = "colorPicker",
        TCP_POPOVER = "colorPickerPopOver",
        PICKER_NAME_IN_POPOVER = "color";

    const colors = [
        "#474747",
        "#d04a02",
        "#e0301e",
        "#00ff00",
        "#ffff00",
        "#0000ff",
        "#000000"
    ];

    // Utility function
    function isEmpty(value) {
        if (Array.isArray(value)) return value.length === 0;
        if (value && typeof value === 'object') return Object.keys(value).length === 0;
        if (typeof value === 'string') return value.trim().length === 0;
        return !value;
    }

    function sendDataMessage(inputColor) {
        var message = {
            sender: GROUP,
            action: "submit",
            data: {}
        };

        var color = inputColor;
        if (color && color.indexOf("rgb") >= 0 && CUI.util?.color?.RGBAToHex) {
            color = CUI.util.color.RGBAToHex(color);
        }
        message.data["color"] = color;
        parent.postMessage(JSON.stringify(message), "*");
    }

    function sendCancelMessage() {
        var message = {
            sender: GROUP,
            action: "cancel"
        };
        parent.postMessage(JSON.stringify(message), "*");
    }

    addPluginToDefaultUISettings();
    addColorPickerPalette();

    // --- ColorPickerPopOver Dialog Class ---
    var ColorPickerPopOver = new Class({
        extend: CUI.rte.ui.cui.AbstractDialog,
        toString: "ColorPickerPopOver",
        initialize: function (config) {
            this.exec = config.execute;
        },
        getDataType: function () {
            return TCP_POPOVER;
        }
    });

    // --- Touch UI Plugin Definition ---
    var TouchUIColorPickerPlugin = new Class({
        toString: "TouchUIColorPickerPlugin",
        extend: CUI.rte.plugins.Plugin,

        pickerUI: null,

        getFeatures: function () {
            return [COLOR_PICKER_FEATURE];
        },

        initializeUI: function (tbGenerator) {
            if (!this.isFeatureEnabled(COLOR_PICKER_FEATURE)) return;

            this.pickerUI = tbGenerator.createElement(COLOR_PICKER_FEATURE, this, false, { title: "Color Picker" });
            tbGenerator.addElement(GROUP, CUI.rte.plugins.Plugin.SORT_FORMAT, this.pickerUI, 10);
            tbGenerator.registerIcon(GROUP + "#" + COLOR_PICKER_FEATURE, "textColor");
        },

        execute: function (id, value, envOptions) {
            if (!isValidSelection()) return;

            var context = envOptions.editContext,
                selection = CUI.rte.Selection.createProcessingSelection(context),
                ek = this.editorKernel,
                startNode = selection.startNode;

            if ((selection.startOffset === startNode.length) && (startNode != selection.endNode)) {
                startNode = startNode.nextSibling;
            }

            var tag = CUI.rte.Common.getTagInPath(context, startNode, "span"),
                color = $(tag).css("color"),
                dm = ek.getDialogManager(),
                $container = CUI.rte.UIUtils.getUIContainer($(context.root)),
                propConfig = { 'parameters': { 'command': this.pluginId + '#' + COLOR_PICKER_FEATURE } };

            let endColor = $(CUI.rte.Common.getTagInPath(context, selection.endNode, "span")).css("color");

            if (color && (color == endColor) && CUI.util?.color?.RGBAToHex) {
                color = CUI.util.color.RGBAToHex(color);
            } else {
                color = null;
            }

            var dialog = new ColorPickerPopOver();
            dialog.attach(propConfig, $container, this.editorKernel);
            dialog.$dialog.css({
                "-webkit-transform": "scale(0.9)",
                "-webkit-transform-origin": "0 0",
                "-moz-transform": "scale(0.9)",
                "-moz-transform-origin": "0 0"
            });

            this.colorPickerPopOver = dialog;
            dm.show(dialog);

            registerReceiveDataListener(receiveMessage);

            // Delay until palette is rendered
            setTimeout(() => {
                const squares = document.querySelectorAll('.square');
                squares.forEach(s => s.classList.remove('selected'));

                const colorIndex = colors.indexOf(color);
                if (colorIndex !== -1 && squares[colorIndex + 1]) {
                    squares[colorIndex + 1].classList.add('selected');
                }

                squares.forEach(square => {
                    square.addEventListener('click', (event) => {
                        squares.forEach(s => s.classList.remove('selected'));
                        square.classList.add('selected');
                        sendDataMessage(event.target.style.backgroundColor);
                    });
                });
            }, 100);

            $('.cq-RichText-editable').on('click', checkAndClose.bind(this));

            function checkAndClose() {
                if ($('coral-popover').hasClass('rte-dialog--colorPickerPopOver') &&
                    $('coral-popover').hasClass('is-open')) {
                    sendCancelMessage();
                }
                $('.cq-RichText-editable').off('click', checkAndClose);
            }

            function isValidSelection() {
                var winSel = window.getSelection();
                return winSel && winSel.rangeCount === 1 && winSel.getRangeAt(0).toString().length > 0;
            }

            function removeReceiveDataListener(handler) {
                if (window.removeEventListener) {
                    window.removeEventListener("message", handler);
                } else if (window.detachEvent) {
                    window.detachEvent("onmessage", handler);
                }
            }

            function registerReceiveDataListener(handler) {
                if (window.addEventListener) {
                    window.addEventListener("message", handler, false);
                } else if (window.attachEvent) {
                    window.attachEvent("onmessage", handler);
                }
            }

            const self = this;

            function receiveMessage(event) {
                if (isEmpty(event.data)) return;
                var message = JSON.parse(event.data);
                if (!message || message.sender !== GROUP) return;

                var action = message.action;

                if (action === "submit" && !isEmpty(message.data)) {
                    ek.relayCmd(id, message.data);
                } else if (action === "remove") {
                    ek.relayCmd(id);
                    self.colorPickerPopOver = null;
                } else if (action === "cancel") {
                    self.colorPickerPopOver = null;
                }

                dialog.hide();
                removeReceiveDataListener(receiveMessage);
            }
        },

        updateState: function (selDef) {
            var hasUC = this.editorKernel.queryState(COLOR_PICKER_FEATURE, selDef);
            if (this.pickerUI != null) {
                this.pickerUI.setSelected(hasUC);
            }
        }
    });

    CUI.rte.plugins.PluginRegistry.register(GROUP, TouchUIColorPickerPlugin);

    // --- Command Definition ---
    var TouchUIColorPickerCmd = new Class({
        toString: "TouchUIColorPickerCmd",
        extend: CUI.rte.commands.Command,

        isCommand: function (cmdStr) {
            return (cmdStr.toLowerCase() == COLOR_PICKER_FEATURE);
        },

        getProcessingOptions: function () {
            var cmd = CUI.rte.commands.Command;
            return cmd.PO_SELECTION | cmd.PO_BOOKMARK | cmd.PO_NODELIST;
        },

        _getTagObject: function (color) {
            return {
                "tag": "span",
                "attributes": { "style": "color:" + color }
            };
        },

        execute: function (execDef) {
            var color = execDef.value ? execDef.value[PICKER_NAME_IN_POPOVER] : undefined,
                selection = execDef.selection,
                nodeList = execDef.nodeList;

            if (!selection || !nodeList) return;

            var common = CUI.rte.Common,
                context = execDef.editContext,
                tagObj = this._getTagObject(color);

            if (isEmpty(color)) {
                nodeList.removeNodesByTag(execDef.editContext, tagObj.tag, undefined, true);
                return;
            }

            var tags = common.getTagInPath(context, selection.startNode, tagObj.tag);
            if (tags != null) {
                nodeList.removeNodesByTag(execDef.editContext, tagObj.tag, undefined, true);
                nodeList.commonAncestor = nodeList.nodes[0].dom.parentNode;
            }
            nodeList.surround(execDef.editContext, tagObj.tag, tagObj.attributes);
        }
    });

    CUI.rte.commands.CommandRegistry.register(COLOR_PICKER_FEATURE, TouchUIColorPickerCmd);

    // --- UI Settings ---
    function addPluginToDefaultUISettings() {
        CUI.rte.ui.cui.DEFAULT_UI_SETTINGS.inline.toolbar.splice(3, 0, GROUP + "#" + COLOR_PICKER_FEATURE);
        CUI.rte.ui.cui.DEFAULT_UI_SETTINGS.fullscreen.toolbar.splice(3, 0, GROUP + "#" + COLOR_PICKER_FEATURE);
    }

    // --- Template Palette ---
    function addColorPickerPalette() {
        let html = '<div class="palette"><span class="square no-color"></span>';
        colors.forEach(color => {
            html += `<span style="background-color:${color}" class="square"></span>`;
        });
        html += '</div>';

        if (typeof CUI.rte.Templates === 'undefined') {
            CUI.rte.Templates = {};
        }
        if (typeof CUI.rte.templates === 'undefined') {
            CUI.rte.templates = {};
        }

        CUI.rte.templates['dlg-' + TCP_POPOVER] =
            CUI.rte.Templates['dlg-' + TCP_POPOVER] = Handlebars.compile(html);
    }

}(jQuery, window.CUI, jQuery(document)));